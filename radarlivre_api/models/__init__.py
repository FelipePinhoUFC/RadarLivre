# -*- coding:utf-8 -*-

from __future__ import unicode_literals

from curses.ascii import NL
import datetime
import logging

from time import time
from django.contrib.auth.models import User
from django.db import models
from django.db.models.aggregates import Max
from django.db.models.fields import CharField, DecimalField, IntegerField, BigIntegerField, \
    BooleanField, TextField, DateTimeField, DateField, URLField
from django.db.models.fields.files import ImageField, FileField
from django.db.models.fields.related import ForeignKey, \
    OneToOneField
from imagekit.models.fields import ImageSpecField
from pilkit.processors.resize import ResizeToFill

import uuid


logger = logging.getLogger("radarlivre.log")

class Collector(models.Model):
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="collectors", null=True)
    
    latitude  = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    longitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    timestamp = BigIntegerField(default=0)
    timestampData = BigIntegerField(default=0)
    
    def getDate(self):
        return datetime.datetime.fromtimestamp(
            int(self.timestamp/1000)
        ).strftime('%d/%m/%Y %H:%M:%S')
    
    def __unicode__(self):
        return "Active collector from " + self.user.username

class Airline(models.Model):

    name = CharField(max_length=255, blank=True, null=True, default="")
    alias = CharField(max_length=255, blank=True, null=True, default="")
    iata = CharField(max_length=4, blank=True, null=True, default="")
    icao = CharField(max_length=8, blank=True, null=True, default="")
    callsign = CharField(max_length=255, blank=True, null=True, default="")
    country = CharField(max_length=255, blank=True, null=True, default="")
    active = BooleanField(default=True)


class Flight(models.Model):
    # Flight identification
    code = CharField(max_length=16, blank=True, null=True, default=True)

    airline = ForeignKey(Airline, null=True, related_name="flights")

    def __unicode__(self):
        return "Flight " + str(self.code)



    
class Airport(models.Model):
    
    # Airport identification
    code = CharField(max_length=100, blank=True, default='', null=True)
    name = CharField(max_length=100, blank=True, default='', null=True)
    
    # Airport location
    country   = CharField(max_length=100, blank=True, default='', null=True)
    state     = CharField(max_length=100, blank=True, default='', null=True)
    city      = CharField(max_length=100, blank=True, default='', null=True)
    latitude  = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    longitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)

    type = CharField(max_length=100, blank=True, default='', null=True)
    
    def __unicode__(self):
        return "Airport " + self.prefix + " - " + self.name


class ADSBInfo(models.Model):

    collector = ForeignKey(Collector, related_name="observations", default=None, null=True)

    modeSCode = CharField(max_length=16, blank=True, null=True, default="")
    callsign = CharField(max_length=16, blank=True, null=True, default="")

    # Airplane position
    latitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    longitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    altitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)

    # Airplane velocity
    verticalVelocity = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    horizontalVelocity = DecimalField(max_digits=40, decimal_places=20, default=0.0)

    # Airplane angle
    groundTrackHeading = DecimalField(max_digits=40, decimal_places=20, default=0.0)

    # Observation date time generated by server
    timestamp = BigIntegerField(default=0)
    timestampSent = BigIntegerField(default=0)

    # Originals ADS-B messages
    messageDataId = CharField(max_length=100, blank=True, default='')
    messageDataPositionEven = CharField(max_length=100, blank=True, default='')
    messageDataPositionOdd = CharField(max_length=100, blank=True, default='')
    messageDataVelocity = CharField(max_length=100, blank=True, default='')


class Observation(models.Model):

    flight = ForeignKey(Flight, null=True, blank=True, default=None, related_name='observations')
    adsbInfo = OneToOneField(ADSBInfo, related_name="observation")

    # Airplane position
    latitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    longitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    altitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)

    # Airplane velocity
    verticalVelocity = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    horizontalVelocity = DecimalField(max_digits=40, decimal_places=20, default=0.0)

    # Airplane angle
    groundTrackHeading = DecimalField(max_digits=40, decimal_places=20, default=0.0)

    # Observation date time generated by server
    timestamp = BigIntegerField(default=0)

    def __unicode__(self):
        return "Observation of flight " + str(self.flight.code)

    @staticmethod
    def generateFromADSBInfo(info):
        # If the flight no exists, will be created
        callsign = info.callsign
        airlineICAO = callsign[:3]
        airline = None
        flight = None
        try:
            airline = Airline.objects.get(icao=airlineICAO)
        except:
            pass

        try:
            flight = Flight.objects.get(code=callsign)
        except Flight.DoesNotExist:
            flight = Flight(code=callsign, airline=airline)
            flight.save()

        delay = info.timestampSent - info.timestamp
        timestamp = int(time() * 1000) - delay

        # Set a correct longitude
        if info.longitude > 180:
            info.longitude -= 360
        info.save()

        info.collector.timestampData = timestamp
        info.collector.save()

        obs = Observation(
            flight=flight,
            adsbInfo=info,
            timestamp=timestamp,
            latitude=info.latitude, longitude=info.longitude, altitude=info.altitude,
            verticalVelocity=info.verticalVelocity, horizontalVelocity=info.horizontalVelocity,
            groundTrackHeading=info.groundTrackHeading
        )
        obs.save()
        return obs


class FlightInfo(models.Model):
    # Flight identification
    flight = OneToOneField(Flight, null=True)
    airline = ForeignKey(Airline, null=True)

    # Airplane position
    latitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    longitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    altitude = DecimalField(max_digits=40, decimal_places=20, default=0.0)

    # Airplane velocity
    verticalVelocity = DecimalField(max_digits=40, decimal_places=20, default=0.0)
    horizontalVelocity = DecimalField(max_digits=40, decimal_places=20, default=0.0)

    # Airplane angle
    groundTrackHeading = DecimalField(max_digits=40, decimal_places=20, default=0.0)

    # Observation date time generated by server
    timestamp = BigIntegerField(default=0)

    @staticmethod
    def generateFromFlight(flight):

        timestampMax = Observation.objects.filter(flight=flight).aggregate(Max("timestamp"))["timestamp__max"]
        obs = Observation.objects.filter(flight=flight).get(timestamp=timestampMax)
        info = None
        try:
            info = FlightInfo.objects.get(flight=flight)
            info.lastObservation = obs
            info.timestamp=timestampMax
        except FlightInfo.DoesNotExist:
            info = FlightInfo(
                flight=flight, airline=flight.airline,
                latitude=obs.latitude,
                longitude=obs.longitude,
                altitude=obs.altitude,
                verticalVelocity=obs.verticalVelocity,
                horizontalVelocity=obs.horizontalVelocity,
                groundTrackHeading=obs.groundTrackHeading,
                timestamp=timestampMax
            )

        info.save()


# Used to store project informations
class About(models.Model):
    
    title    = CharField(max_length=1000, blank=True, default="")
    subtitle = CharField(max_length=1000, blank=True, default="")
    info     = TextField(blank=True, default="")
    
    index = IntegerField(default=0)
    
    externURL = URLField(verbose_name="Extern link", default="", blank=True)
    
    image = ImageField(upload_to="about_images", null=True)
    
    largeImage = ImageSpecField(source="image",
                                processors=[ResizeToFill(1920, 1080)],
                                format='JPEG',
                                options={'quality': 75, 'progressive': True})
    
    mediumImage = ImageSpecField(source="image",
                                 processors=[ResizeToFill(1280, 720)],
                                 format='JPEG',
                                 options={'quality': 75, 'progressive': True})
    
    smallImage = ImageSpecField(source="image",
                                processors=[ResizeToFill(640, 360)],
                                format='JPEG',
                                options={'quality': 75, 'progressive': True})
    
    def getShortDescription(self):
        return str(self.title + " - " + self.subtitle[:50] + "...")
    
    def toHTML(self):
        return self.info.replace("<p", "<p class=\"rl-document__paragraph\"")\
            .replace("<span", "<span class=\"rl-document__title\"")
    
    def __unicode__(self):
        return self.title + " - " + self.subtitle
    
# Send notify to all app's
class Notify(models.Model):
    
    title = CharField(max_length=1000, blank=True, default="")
    subtitle = CharField(max_length=1000, blank=True, default="")
    info = TextField(blank=True, default="")
    
    showDate = DateTimeField()
    
    vibrate = BooleanField(default=True)
    song = BooleanField(default=False)
    
    def __unicode__(self):
        return self.title + " - " + self.subtitle


# Radar Livre Softwares
class Software(models.Model): 
    
    title = CharField(max_length=1000, blank=True, default="")
    
    versionName = CharField(max_length=1000, blank=True, default="")
    versionCode = IntegerField(default=0)
    
    lastUpdate = DateField(default=0)
    
    executable = FileField(
        upload_to="softwares/collector"
    )

