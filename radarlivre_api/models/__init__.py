# -*- coding=utf-8 -*-

from __future__ import unicode_literals

from django.db import models
from django.db.models.fields import CharField, DecimalField, IntegerField, BigIntegerField,\
    BooleanField, TextField, DateTimeField, DateField, URLField
from django.db.models.fields.related import ForeignKey,\
    OneToOneField
from django.db.models.fields.files import ImageField, FileField
from imagekit.models.fields import ImageSpecField
from pilkit.processors.resize import ResizeToFill

import datetime


class Airplane(models.Model):
    
    # Airplane identification
    icao = CharField(max_length=100, primary_key=True)
    
    def __unicode__(self):
        return "Airplane " + self.icao

class AirplaneInfo(models.Model):
    
    # Basic airplane info
    airplane = OneToOneField(Airplane)
    flight = CharField(max_length=100, blank=True, default="")
    airline = CharField(max_length=100, blank=True, default="")
    airlineCountry = CharField(max_length=100, blank=True, default="")
    
    # Airplane position
    latitude  = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    longitude = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    altitude  = IntegerField(default=0)
    
    # Airplane velocity
    verticalVelocity  = IntegerField(default=0)
    horizontalVelocity  = IntegerField(default=0)
    
    #Airplane angle
    angle  = IntegerField(default=0)
    
    #Last observation date time generated by server
    timestamp  = BigIntegerField(default=0)
    
    def __unicode__(self):
        return "Airplane info:" + str(self.airplane) + " " + str( datetime.datetime.fromtimestamp( int((self.timestamp)/1000) ).strftime('%d-%m-%Y %H:%M:%S') )
    
class Airport(models.Model):
    
    # Airport identification
    prefix    = CharField(max_length=100, primary_key=True)
    name      = CharField(max_length=100, blank=True, default='')
    
    # Airport location
    country   = CharField(max_length=100, blank=True, default='')
    city      = CharField(max_length=100, blank=True, default='')
    latitude  = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    longitude = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    altitude  = IntegerField(default=0)
    
    def __unicode__(self):
        return "Airport " + self.prefix + " - " + self.name
        
class Flight(models.Model):

    # Flight identification
    calsign = CharField(max_length=100, primary_key=True)
    
    # For each route, can exists many airplanes
    airplane = ForeignKey(Airplane, blank=True, default=None, related_name='route_airplane')
    
    # Route origin and destine
    origin  = ForeignKey(Airport, blank=True, default=None, null=True, related_name='origin')
    destine = ForeignKey(Airport, blank=True, default=None, null=True, related_name='destine')
    
    def __unicode__(self):
        return "Route from " + str(self.origin) + " to " + str(self.destine)
    
class Observation(models.Model):
    
    # Airplane and Route of observed
    airplane = ForeignKey(Airplane, null=True, blank=True, default=None, related_name='observation_airplane')
    flight   = ForeignKey(Flight, null=True, blank=True, default=None, related_name='observation_route')
    
    # Airplane position
    latitude  = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    longitude = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    altitude  = IntegerField(default=0)
    
    # Airplane velocity
    verticalVelocity  = IntegerField(default=0)
    horizontalVelocity  = IntegerField(default=0)
    
    #Airplane angle
    angle  = IntegerField(default=0)
    
    # Observation date time generated by server
    timestamp  = BigIntegerField(default=0)
    
    def __unicode__(self):
        return "Observation of airplane " + str(self.airplane)
    
# This object is used to receive the Even and Odd packets before complete a final Observation    
class HalfObservation(models.Model):
    # Airplane and Route of observed
    airplane = CharField(max_length=100, blank=True, default='')
    flight   = CharField(max_length=100, blank=True, default='')
    
    # Collector position
    latitudeCollector  = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    longitudeCollector = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    
    # Airplane position
    latitudeEven  = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    longitudeEven = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    latitudeOdd   = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    longitudeOdd  = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    altitude      = IntegerField(default=0)
    
    # Airplane velocity
    verticalVelocity  = IntegerField(default=0)
    horizontalVelocity  = IntegerField(default=0)
    
    # Airplane angle
    angle  = IntegerField(default=0)
    
    # Observation date time generated by server
    timestamp  = BigIntegerField(default=0)
    timestampSent  = BigIntegerField(default=0)
    
    # Originals ADS-B messages
    messageDataId           = CharField(max_length=100, blank=True, default='')
    messageDataPositionEven = CharField(max_length=100, blank=True, default='')
    messageDataPositionOdd  = CharField(max_length=100, blank=True, default='')
    messageDataVelocity     = CharField(max_length=100, blank=True, default='')
    
    # Flags
    lastReceived = CharField(max_length=1, blank=True, default="")
    evenReceived = BooleanField(default=False)
    oddReceived = BooleanField(default=False)
    velocityReceived = BooleanField(default=False)
    identityReceived = BooleanField(default=False)
    
    def update(self, other):
        self.timestamp = other.timestamp
        self.timestampSent = other.timestampSent
        self.latitudeCollector = other.latitudeCollector
        self.longitudeCollector = other.longitudeCollector
        
        if other.evenReceived:
            self.latitudeEven = other.latitudeEven
            self.longitudeEven = other.longitudeEven
            self.altitude = other.altitude
            self.lastReceived = other.lastReceived
            self.evenReceived = True;
            self.messageDataPositionEven = other.messageDataPositionEven;
                        
        if other.oddReceived:
            self.latitudeOdd = other.latitudeOdd
            self.longitudeOdd = other.longitudeOdd
            self.altitude = other.altitude
            self.lastReceived = other.lastReceived
            self.oddReceived = True;
            self.messageDataPositionOdd = other.messageDataPositionOdd;
            
        if other.velocityReceived:
            self.horizontalVelocity = other.horizontalVelocity
            self.verticalVelocity = other.verticalVelocity
            self.angle = other.angle
            self.velocityReceived = True;
            self.messageDataVelocity = other.messageDataVelocity;
            
        if other.identityReceived:
            self.airplane = other.airplane
            self.flight = other.flight
            self.identityReceived = True;
            self.messageDataId = other.messageDataId;
            
        self.save()
    
    def isComplete(self):
        return self.evenReceived and self.oddReceived and self.velocityReceived and self.identityReceived
    
    def __unicode__(self):
        return "Half Observation of airplane " + str(self.airplane) + "; even: " + str(self.evenReceived) + "; odd: " + str(self.oddReceived)
    
    
# Used to manage ADS-B messages
class ADSBMessage(models.Model):
    
    # Message data
    data = CharField(max_length=200)
    
    # Collector position
    latitude  = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    longitude = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    
    def __unicode__(self):
        return "ADS-B message"
    
# Used to store project informations
class About(models.Model):
    
    title = CharField(max_length=1000, blank=True, default="")
    subtitle = CharField(max_length=1000, blank=True, default="")
    info = TextField(blank=True, default="")
    
    index = IntegerField(default=0)
    
    externURL = URLField(verbose_name="Extern link", default="", blank=True)
    
    image = ImageField(upload_to="about_images", null=True)
    
    largeImage = ImageSpecField(source="image",
                                processors=[ResizeToFill(1920, 1080)],
                                format='JPEG',
                                options={'quality': 75, 'progressive': True})
    
    mediumImage = ImageSpecField(source="image",
                                 processors=[ResizeToFill(1280, 720)],
                                 format='JPEG',
                                 options={'quality': 75, 'progressive': True})
    
    smallImage = ImageSpecField(source="image",
                                processors=[ResizeToFill(640, 360)],
                                format='JPEG',
                                options={'quality': 75, 'progressive': True})
    
    def getShortDescription(self):
        return str(self.title + " - " + self.subtitle[:50] + "...")
    
    def toHTML(self):
        return self.info.replace("<p", "<p class=\"rl-document__paragraph\"")\
            .replace("<span", "<span class=\"rl-document__title\"")
    
    def __unicode__(self):
        return self.title + " - " + self.subtitle
    
# Send notify to all app's
class Notify(models.Model):
    
    title = CharField(max_length=1000, blank=True, default="")
    subtitle = CharField(max_length=1000, blank=True, default="")
    info = TextField(blank=True, default="")
    
    showDate = DateTimeField()
    
    vibrate = BooleanField(default=True)
    song = BooleanField(default=False)
    
    def __unicode__(self):
        return self.title + " - " + self.subtitle


# Radar Livre Softwares
class Software(models.Model): 
    
    title = CharField(max_length=1000, blank=True, default="")
    
    versionName = CharField(max_length=1000, blank=True, default="")
    versionCode = IntegerField(default=0)
    
    lastUpdate = DateField(default=0)
    
    executable = FileField(
        upload_to="softwares/collector"
    )


class Contrib(models.Model):
    
    ip = CharField(max_length=15, blank=True, primary_key=True)
    latitude  = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    longitude = DecimalField(max_digits=20, decimal_places=10, default=0.0)
    timestamp = BigIntegerField(default=0)
    
    def getDate(self):
        return datetime.datetime.fromtimestamp(
                    int(self.timestamp/1000)
                ).strftime('%d/%m/%Y %H:%M:%S')
    











